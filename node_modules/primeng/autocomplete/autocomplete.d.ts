import { ElementRef, AfterViewChecked, AfterContentInit, OnDestroy, EventEmitter, QueryList, TemplateRef, Renderer2, ChangeDetectorRef, IterableDiffers } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/inputtext';
import * as ɵngcc3 from 'primeng/button';
import * as ɵngcc4 from 'primeng/api';
export declare const AUTOCOMPLETE_VALUE_ACCESSOR: any;
export declare class AutoComplete implements AfterViewChecked, AfterContentInit, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    renderer: Renderer2;
    cd: ChangeDetectorRef;
    differs: IterableDiffers;
    minLength: number;
    delay: number;
    style: any;
    panelStyle: any;
    styleClass: string;
    panelStyleClass: string;
    inputStyle: any;
    inputId: string;
    inputStyleClass: string;
    placeholder: string;
    readonly: boolean;
    disabled: boolean;
    maxlength: number;
    name: string;
    required: boolean;
    size: number;
    appendTo: any;
    autoHighlight: boolean;
    forceSelection: boolean;
    type: string;
    autoZIndex: boolean;
    baseZIndex: number;
    ariaLabel: string;
    ariaLabelledBy: string;
    dropdownIcon: string;
    unique: boolean;
    completeOnFocus: boolean;
    completeMethod: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    onUnselect: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    onDropdownClick: EventEmitter<any>;
    onClear: EventEmitter<any>;
    onKeyUp: EventEmitter<any>;
    onShow: EventEmitter<any>;
    onHide: EventEmitter<any>;
    field: string;
    scrollHeight: string;
    dropdown: boolean;
    dropdownMode: string;
    multiple: boolean;
    tabindex: number;
    dataKey: string;
    emptyMessage: string;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    autofocus: boolean;
    autocomplete: string;
    inputEL: ElementRef;
    multiInputEL: ElementRef;
    multiContainerEL: ElementRef;
    dropdownButton: ElementRef;
    templates: QueryList<any>;
    overlay: HTMLDivElement;
    itemTemplate: TemplateRef<any>;
    selectedItemTemplate: TemplateRef<any>;
    value: any;
    _suggestions: any[];
    onModelChange: Function;
    onModelTouched: Function;
    timeout: any;
    overlayVisible: boolean;
    documentClickListener: any;
    suggestionsUpdated: boolean;
    highlightOption: any;
    highlightOptionChanged: boolean;
    focus: boolean;
    filled: boolean;
    inputClick: boolean;
    inputKeyDown: boolean;
    noResults: boolean;
    differ: any;
    inputFieldValue: string;
    loading: boolean;
    documentResizeListener: any;
    forceSelectionUpdateModelTimeout: any;
    listId: string;
    itemClicked: boolean;
    constructor(el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef, differs: IterableDiffers);
    suggestions: any[];
    ngAfterViewChecked(): void;
    handleSuggestionsChange(): void;
    ngAfterContentInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    onInput(event: Event): void;
    onInputClick(event: MouseEvent): void;
    search(event: any, query: string): void;
    selectItem(option: any, focus?: boolean): void;
    show(): void;
    onOverlayAnimationStart(event: AnimationEvent): void;
    onOverlayAnimationDone(event: AnimationEvent): void;
    appendOverlay(): void;
    resolveFieldData(value: any): any;
    restoreOverlayAppend(): void;
    alignOverlay(): void;
    hide(): void;
    handleDropdownClick(event: any): void;
    focusInput(): void;
    removeItem(item: any): void;
    onKeydown(event: any): void;
    onKeyup(event: any): void;
    onInputFocus(event: any): void;
    onInputBlur(event: any): void;
    onInputChange(event: any): void;
    onInputPaste(event: ClipboardEvent): void;
    isSelected(val: any): boolean;
    findOptionIndex(option: any): number;
    updateFilledState(): void;
    updateInputField(): void;
    bindDocumentClickListener(): void;
    isDropdownClick(event: any): boolean;
    unbindDocumentClickListener(): void;
    bindDocumentResizeListener(): void;
    unbindDocumentResizeListener(): void;
    onWindowResize(): void;
    onOverlayHide(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AutoComplete>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AutoComplete, "p-autoComplete", never, {
    "minLength": "minLength";
    "delay": "delay";
    "type": "type";
    "autoZIndex": "autoZIndex";
    "baseZIndex": "baseZIndex";
    "dropdownIcon": "dropdownIcon";
    "unique": "unique";
    "completeOnFocus": "completeOnFocus";
    "scrollHeight": "scrollHeight";
    "dropdownMode": "dropdownMode";
    "showTransitionOptions": "showTransitionOptions";
    "hideTransitionOptions": "hideTransitionOptions";
    "autocomplete": "autocomplete";
    "suggestions": "suggestions";
    "disabled": "disabled";
    "style": "style";
    "panelStyle": "panelStyle";
    "styleClass": "styleClass";
    "panelStyleClass": "panelStyleClass";
    "inputStyle": "inputStyle";
    "inputId": "inputId";
    "inputStyleClass": "inputStyleClass";
    "placeholder": "placeholder";
    "readonly": "readonly";
    "maxlength": "maxlength";
    "name": "name";
    "required": "required";
    "size": "size";
    "appendTo": "appendTo";
    "autoHighlight": "autoHighlight";
    "forceSelection": "forceSelection";
    "ariaLabel": "ariaLabel";
    "ariaLabelledBy": "ariaLabelledBy";
    "field": "field";
    "dropdown": "dropdown";
    "multiple": "multiple";
    "tabindex": "tabindex";
    "dataKey": "dataKey";
    "emptyMessage": "emptyMessage";
    "autofocus": "autofocus";
}, {
    "completeMethod": "completeMethod";
    "onSelect": "onSelect";
    "onUnselect": "onUnselect";
    "onFocus": "onFocus";
    "onBlur": "onBlur";
    "onDropdownClick": "onDropdownClick";
    "onClear": "onClear";
    "onKeyUp": "onKeyUp";
    "onShow": "onShow";
    "onHide": "onHide";
}, ["templates"]>;
}
export declare class AutoCompleteModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AutoCompleteModule, [typeof AutoComplete], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.InputTextModule, typeof ɵngcc3.ButtonModule, typeof ɵngcc4.SharedModule], [typeof AutoComplete, typeof ɵngcc4.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<AutoCompleteModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2NvbXBsZXRlLmQudHMiLCJzb3VyY2VzIjpbImF1dG9jb21wbGV0ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0hBOzs7O0FBRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBBZnRlclZpZXdDaGVja2VkLCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3ksIEV2ZW50RW1pdHRlciwgUXVlcnlMaXN0LCBUZW1wbGF0ZVJlZiwgUmVuZGVyZXIyLCBDaGFuZ2VEZXRlY3RvclJlZiwgSXRlcmFibGVEaWZmZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbmltYXRpb25FdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBBVVRPQ09NUExFVEVfVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF1dG9Db21wbGV0ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIGVsOiBFbGVtZW50UmVmO1xuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycztcbiAgICBtaW5MZW5ndGg6IG51bWJlcjtcbiAgICBkZWxheTogbnVtYmVyO1xuICAgIHN0eWxlOiBhbnk7XG4gICAgcGFuZWxTdHlsZTogYW55O1xuICAgIHN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBwYW5lbFN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBpbnB1dFN0eWxlOiBhbnk7XG4gICAgaW5wdXRJZDogc3RyaW5nO1xuICAgIGlucHV0U3R5bGVDbGFzczogc3RyaW5nO1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgbWF4bGVuZ3RoOiBudW1iZXI7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHJlcXVpcmVkOiBib29sZWFuO1xuICAgIHNpemU6IG51bWJlcjtcbiAgICBhcHBlbmRUbzogYW55O1xuICAgIGF1dG9IaWdobGlnaHQ6IGJvb2xlYW47XG4gICAgZm9yY2VTZWxlY3Rpb246IGJvb2xlYW47XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGF1dG9aSW5kZXg6IGJvb2xlYW47XG4gICAgYmFzZVpJbmRleDogbnVtYmVyO1xuICAgIGFyaWFMYWJlbDogc3RyaW5nO1xuICAgIGFyaWFMYWJlbGxlZEJ5OiBzdHJpbmc7XG4gICAgZHJvcGRvd25JY29uOiBzdHJpbmc7XG4gICAgdW5pcXVlOiBib29sZWFuO1xuICAgIGNvbXBsZXRlT25Gb2N1czogYm9vbGVhbjtcbiAgICBjb21wbGV0ZU1ldGhvZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25TZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uVW5zZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQmx1cjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25Ecm9wZG93bkNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkNsZWFyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbktleVVwOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblNob3c6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uSGlkZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZmllbGQ6IHN0cmluZztcbiAgICBzY3JvbGxIZWlnaHQ6IHN0cmluZztcbiAgICBkcm9wZG93bjogYm9vbGVhbjtcbiAgICBkcm9wZG93bk1vZGU6IHN0cmluZztcbiAgICBtdWx0aXBsZTogYm9vbGVhbjtcbiAgICB0YWJpbmRleDogbnVtYmVyO1xuICAgIGRhdGFLZXk6IHN0cmluZztcbiAgICBlbXB0eU1lc3NhZ2U6IHN0cmluZztcbiAgICBzaG93VHJhbnNpdGlvbk9wdGlvbnM6IHN0cmluZztcbiAgICBoaWRlVHJhbnNpdGlvbk9wdGlvbnM6IHN0cmluZztcbiAgICBhdXRvZm9jdXM6IGJvb2xlYW47XG4gICAgYXV0b2NvbXBsZXRlOiBzdHJpbmc7XG4gICAgaW5wdXRFTDogRWxlbWVudFJlZjtcbiAgICBtdWx0aUlucHV0RUw6IEVsZW1lbnRSZWY7XG4gICAgbXVsdGlDb250YWluZXJFTDogRWxlbWVudFJlZjtcbiAgICBkcm9wZG93bkJ1dHRvbjogRWxlbWVudFJlZjtcbiAgICB0ZW1wbGF0ZXM6IFF1ZXJ5TGlzdDxhbnk+O1xuICAgIG92ZXJsYXk6IEhUTUxEaXZFbGVtZW50O1xuICAgIGl0ZW1UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBzZWxlY3RlZEl0ZW1UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICB2YWx1ZTogYW55O1xuICAgIF9zdWdnZXN0aW9uczogYW55W107XG4gICAgb25Nb2RlbENoYW5nZTogRnVuY3Rpb247XG4gICAgb25Nb2RlbFRvdWNoZWQ6IEZ1bmN0aW9uO1xuICAgIHRpbWVvdXQ6IGFueTtcbiAgICBvdmVybGF5VmlzaWJsZTogYm9vbGVhbjtcbiAgICBkb2N1bWVudENsaWNrTGlzdGVuZXI6IGFueTtcbiAgICBzdWdnZXN0aW9uc1VwZGF0ZWQ6IGJvb2xlYW47XG4gICAgaGlnaGxpZ2h0T3B0aW9uOiBhbnk7XG4gICAgaGlnaGxpZ2h0T3B0aW9uQ2hhbmdlZDogYm9vbGVhbjtcbiAgICBmb2N1czogYm9vbGVhbjtcbiAgICBmaWxsZWQ6IGJvb2xlYW47XG4gICAgaW5wdXRDbGljazogYm9vbGVhbjtcbiAgICBpbnB1dEtleURvd246IGJvb2xlYW47XG4gICAgbm9SZXN1bHRzOiBib29sZWFuO1xuICAgIGRpZmZlcjogYW55O1xuICAgIGlucHV0RmllbGRWYWx1ZTogc3RyaW5nO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgZG9jdW1lbnRSZXNpemVMaXN0ZW5lcjogYW55O1xuICAgIGZvcmNlU2VsZWN0aW9uVXBkYXRlTW9kZWxUaW1lb3V0OiBhbnk7XG4gICAgbGlzdElkOiBzdHJpbmc7XG4gICAgaXRlbUNsaWNrZWQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzKTtcbiAgICBzdWdnZXN0aW9uczogYW55W107XG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQ7XG4gICAgaGFuZGxlU3VnZ2VzdGlvbnNDaGFuZ2UoKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IEZ1bmN0aW9uKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUodmFsOiBib29sZWFuKTogdm9pZDtcbiAgICBvbklucHV0KGV2ZW50OiBFdmVudCk6IHZvaWQ7XG4gICAgb25JbnB1dENsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBzZWFyY2goZXZlbnQ6IGFueSwgcXVlcnk6IHN0cmluZyk6IHZvaWQ7XG4gICAgc2VsZWN0SXRlbShvcHRpb246IGFueSwgZm9jdXM/OiBib29sZWFuKTogdm9pZDtcbiAgICBzaG93KCk6IHZvaWQ7XG4gICAgb25PdmVybGF5QW5pbWF0aW9uU3RhcnQoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZDtcbiAgICBvbk92ZXJsYXlBbmltYXRpb25Eb25lKGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQ7XG4gICAgYXBwZW5kT3ZlcmxheSgpOiB2b2lkO1xuICAgIHJlc29sdmVGaWVsZERhdGEodmFsdWU6IGFueSk6IGFueTtcbiAgICByZXN0b3JlT3ZlcmxheUFwcGVuZCgpOiB2b2lkO1xuICAgIGFsaWduT3ZlcmxheSgpOiB2b2lkO1xuICAgIGhpZGUoKTogdm9pZDtcbiAgICBoYW5kbGVEcm9wZG93bkNsaWNrKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGZvY3VzSW5wdXQoKTogdm9pZDtcbiAgICByZW1vdmVJdGVtKGl0ZW06IGFueSk6IHZvaWQ7XG4gICAgb25LZXlkb3duKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uS2V5dXAoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25JbnB1dEZvY3VzKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uSW5wdXRCbHVyKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uSW5wdXRDaGFuZ2UoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25JbnB1dFBhc3RlKGV2ZW50OiBDbGlwYm9hcmRFdmVudCk6IHZvaWQ7XG4gICAgaXNTZWxlY3RlZCh2YWw6IGFueSk6IGJvb2xlYW47XG4gICAgZmluZE9wdGlvbkluZGV4KG9wdGlvbjogYW55KTogbnVtYmVyO1xuICAgIHVwZGF0ZUZpbGxlZFN0YXRlKCk6IHZvaWQ7XG4gICAgdXBkYXRlSW5wdXRGaWVsZCgpOiB2b2lkO1xuICAgIGJpbmREb2N1bWVudENsaWNrTGlzdGVuZXIoKTogdm9pZDtcbiAgICBpc0Ryb3Bkb3duQ2xpY2soZXZlbnQ6IGFueSk6IGJvb2xlYW47XG4gICAgdW5iaW5kRG9jdW1lbnRDbGlja0xpc3RlbmVyKCk6IHZvaWQ7XG4gICAgYmluZERvY3VtZW50UmVzaXplTGlzdGVuZXIoKTogdm9pZDtcbiAgICB1bmJpbmREb2N1bWVudFJlc2l6ZUxpc3RlbmVyKCk6IHZvaWQ7XG4gICAgb25XaW5kb3dSZXNpemUoKTogdm9pZDtcbiAgICBvbk92ZXJsYXlIaWRlKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF1dG9Db21wbGV0ZU1vZHVsZSB7XG59XG4iXX0=